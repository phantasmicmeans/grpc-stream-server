syntax= "proto3";

package routeguide;

option java_multiple_files = true;
option java_package = "com.kt.loadshow.grpc.grpc"; //specifies in what Java package name your generated classes should live
option java_outer_classname = "RouteGuideProto";
//defines the class name which should contain all of the classes in this file.
//If you don't give a java_outer_classname explicitly, it will be generated by converting the file name to camel case.
//For example, "my_proto.proto" would, by default, use "MyProto" as the outer class name.

//service definition
service RouteGuide {
    rpc LoadImage(SpringRequest) returns (CReply) {}
    rpc LoadImages(Request) returns (VAReply) {}

    // server to client streaming
    rpc ListFeatures(Rectangle) returns (stream Feature) {}

    //client -> server streaming
    rpc RecordRoute(stream Point) returns (RouteSummary) {}

    //양방향 스트리밍 RPC
    rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

message Point {
    int32 latitude = 1;
    int32 longtitude = 2;
}

message Rectangle {
    Point lo = 1;
    Point hi = 2;
}

message Feature {
    string name = 1;
    Point location = 2;
}

message FeatureDatabase {
    repeated Feature feature = 1; //repeated 는 java List
}

message RouteNote {
    Point location = 1;
    string message = 2;
}

message RouteSummary {
    int32 point_count = 1;  // <-- 추후 메시지 변화에 따른 하위 호환성을 위해서 숫자를 지정해야함.
    int32 feature_count = 2;
    int32 distance = 3;
    int32 elapsed_time = 4;
}

message SpringRequest {
    string uuid = 1;
    string filename = 2;
    //    bytes image = 3;

    enum ModelType {
        TYPE_UNSPECIFIED = 0;
        LICENSE_PLATE_DETECTION = 1;
        AVATAR_DETECTION = 2;
        FACE_DETECTION = 3;
    }
    ModelType modelType = 3;
}

message Request {
    repeated SpringRequest request = 1;
}

message CReply {
    string result = 1;
}

message VAReply {
    repeated CReply reply = 1;
}